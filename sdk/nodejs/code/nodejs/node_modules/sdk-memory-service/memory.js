const log = require('lambda-log');
const httpLib = require('./http');
const signerLib = require('./signer');
const S3Manager = require('./s3');


class Memory {
    constructor(params,appName) {
        this.distribution = params["DISTRIBUTION"];
        this.app = appName;
        this.bucketName = params["BUCKET_NAME"];
        this.privateMemory = (params["PK_PATH"] != undefined) && (params["PUBLIC_KEY_ID"] != undefined);
        if (this.privateMemory) {
            this.pkPath = params["PK_PATH"];
            this.keyPairId = params["PUBLIC_KEY_ID"];
        }
        if (params["DEBUG"]==true){
            log.options.debug = true;
        }
        log.debug("privateMemory: " + this.privateMemory)

    }

    async put(varName, varValue) {
        var type = null;
        switch (typeof varValue) {
            case 'string':
                type = "string";
                break;
            case 'number':
                type = "number";
                break;
            case 'object':
                type = "object";
                break;
            case 'boolean':
                type = "boolean";
                break;
            default:
                type = "not-supported";
        }
        log.debug("varType: " + type)
        await this.putVariable(varName, varValue, type, "high");
        return;
    }

    async putVariable(varName, varValue, objectType, accessFrequency) {
        var path = "public";
        if (this.privateMemory) {
            path = "private";
        }
        var prefix = path + "/" + this.app + "/" + varName + ".json";
        if (objectType == "number" || objectType == "string" || objectType == "boolean")
            varValue = String(varValue);
        var document = {
            "objectKey": prefix,
            "accessFrequency": accessFrequency,
            "objectType": objectType,
            "objectValue": varValue
        }
        var data = JSON.stringify(document);
        log.debug("data: " + data)
        var s3 = new S3Manager(this.bucketName, prefix, data);
        await s3.write();
        return;
    }


    get(varName) {
        var result = this.getVariable(varName, this.privateMemory);
        switch (typeof result['objectType']) {
            case 'string':
                return result['objectValue'];
            case 'number':
                return parseInt(result['objectValue']);
            case 'object':
                return result['objectValue'];
            case 'boolean':
                if (result['objectValue'] == true) {
                    return true;
                }
                else {
                    return false;
                }
            default:
                throw "Type not supported";
        }
    }

    getVariable(varName, isPrivate) {
        var sufix = this.app + "/" + varName + ".json";
        var url;
        if (isPrivate == false) {
            url = "https://" + this.distribution + "/" + sufix;
        }
        else {
            url = "https://" + this.distribution + "/" + sufix;
            var signer = new signerLib(url, this.keyPairId, this.pkPath, 900);
            url = signer.generateSignedURL();
        }
        var http = new httpLib(url);
        return http.get();
    }

}

class TestMemory {
    test() {
        console.log("Testing Memory");
        const params = {
            "DISTRIBUTION": "d33fwx7e14khkx.cloudfront.net",
            "BUCKET_NAME": "storage-bucket-123",
            "DEBUG": true
        };
        var memory = new Memory(params,"memory_service_js_example");
        console.log(memory.get("var100"));
    }
}

//new TestMemory().test();

module.exports = Memory;
